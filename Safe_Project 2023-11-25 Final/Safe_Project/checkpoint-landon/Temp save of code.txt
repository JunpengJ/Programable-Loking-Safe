library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity PmodKYPD is
    Port ( 
			  clk : in  STD_LOGIC;
			  JB : inout  STD_LOGIC_VECTOR (7 downto 0); -- PmodKYPD is designed to be connected to JA
           an : out  STD_LOGIC_VECTOR (3 downto 0);   -- Controls which position of the seven segment display to display
           seg : out  STD_LOGIC_VECTOR (6 downto 0); -- digit to display on the seven segment display 
           valid_pass : out std_logic;
           keypresses : out  STD_LOGIC_VECTOR (2 downto 0));
end PmodKYPD;

architecture Behavioral of PmodKYPD is

component Decoder is
	Port (
			 clk : in  STD_LOGIC;
          Row : in  STD_LOGIC_VECTOR (3 downto 0);
			 Col : out  STD_LOGIC_VECTOR (3 downto 0);
          DecodeOut : out  STD_LOGIC_VECTOR (3 downto 0));
	end component;

component DisplayController is
	Port (
			  DispVal : in  STD_LOGIC_VECTOR (3 downto 0);
           anode: out std_logic_vector(3 downto 0);
           segOut : out  STD_LOGIC_VECTOR (6 downto 0));
	end component;
	
component PasswordDetector is
    Port ( 
           clock : in  std_logic;                               -- Clock input
           keypad_input : in  std_logic_vector(3 downto 0);   -- Input from keypad for 4-digit code (Active Low)
           passcode_valid : out std_logic;                    -- Output indicating if the passcode is valid
           test : out std_logic_vector(2 downto 0)
    );
end component;

signal Decode: STD_LOGIC_VECTOR (3 downto 0);
begin

	
	C0: Decoder port map (clk=>clk, Row =>JB(7 downto 4), Col=>JB(3 downto 0), DecodeOut=>Decode);
	C1: DisplayController port map (DispVal=>Decode, anode=>an, segOut=>seg );
	C2: PasswordDetector port map (clk, Decode, valid_pass, keypresses);


end Behavioral;



library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity Decoder is
    Port (
			  clk : in  STD_LOGIC;
          Row : in  STD_LOGIC_VECTOR (3 downto 0);
			 Col : out  STD_LOGIC_VECTOR (3 downto 0);
          DecodeOut : out  STD_LOGIC_VECTOR (3 downto 0));
end Decoder;

architecture Behavioral of Decoder is

signal sclk :STD_LOGIC_VECTOR(19 downto 0);
begin
	process(clk)
		begin 
		if clk'event and clk = '1' then
			-- 1ms
			if sclk = "00011000011010100000" then 
				--C1
				Col<= "0111";
				sclk <= sclk+1;
			-- check row pins
			elsif sclk = "00011000011010101000" then	
				--R1
				if Row = "0111" then
					DecodeOut <= "0001";	--1
				--R2
				elsif Row = "1011" then
					DecodeOut <= "0100"; --4
				--R3
				elsif Row = "1101" then
					DecodeOut <= "0111"; --7
				--R4
				elsif Row = "1110" then
					DecodeOut <= "0000"; --0
				end if;
				sclk <= sclk+1;
			-- 2ms
			elsif sclk = "00110000110101000000" then	
				--C2
				Col<= "1011";
				sclk <= sclk+1;
			-- check row pins
			elsif sclk = "00110000110101001000" then	
				--R1
				if Row = "0111" then		
					DecodeOut <= "0010"; --2
				--R2
				elsif Row = "1011" then
					DecodeOut <= "0101"; --5
				--R3
				elsif Row = "1101" then
					DecodeOut <= "1000"; --8
				--R4
				elsif Row = "1110" then
					DecodeOut <= "1111"; --F
				end if;
				sclk <= sclk+1;	
			--3ms
			elsif sclk = "01001001001111100000" then 
				--C3
				Col<= "1101";
				sclk <= sclk+1;
			-- check row pins
			elsif sclk = "01001001001111101000" then 
				--R1
				if Row = "0111" then
					DecodeOut <= "0011"; --3	
				--R2
				elsif Row = "1011" then
					DecodeOut <= "0110"; --6
				--R3
				elsif Row = "1101" then
					DecodeOut <= "1001"; --9
				--R4
				elsif Row = "1110" then
					DecodeOut <= "1110"; --E
				end if;
				sclk <= sclk+1;
			--4ms
			elsif sclk = "01100001101010000000" then 			
				--C4
				Col<= "1110";
				sclk <= sclk+1;
			-- check row pins
			elsif sclk = "01100001101010001000" then 
				--R1
				if Row = "0111" then
					DecodeOut <= "1010"; --A
				--R2
				elsif Row = "1011" then
					DecodeOut <= "1011"; --B
				--R3
				elsif Row = "1101" then
					DecodeOut <= "1100"; --C
				--R4
				elsif Row = "1110" then
					DecodeOut <= "1101"; --D
				end if;
				sclk <= "00000000000000000000";	
			else
				sclk <= sclk+1;	
			end if;
		end if;
	end process;
		
		
						 
end Behavioral;



library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;


entity DisplayController is
    Port ( 
			  --output from the Decoder
			  DispVal : in  STD_LOGIC_VECTOR (3 downto 0);
			  --controls the display digits
			  anode: out std_logic_vector(3 downto 0);
			  --controls which digit to display
           segOut : out  STD_LOGIC_VECTOR (6 downto 0)); 
end DisplayController;

architecture Behavioral of DisplayController is
begin
	-- only display the leftmost digit
	anode<="1110";
			

	 with DispVal select
		segOut <=  "1000000" when "0000", --0
					  "1111001" when "0001", --1
					  "0100100" when "0010", --2
					  "0110000" when "0011", --3
					  "0011001" when "0100", --4
					  "0010010" when "0101", --5
					  "0000010" when "0110", --6
					  "1111000" when "0111", --7
					  "0000000" when "1000", --8
					  "0010000" when "1001", --9
					  "0001000" when "1010", --A
					  "0000011" when "1011", --B
					  "1000110" when "1100", --C
					  "0100001" when "1101", --D
					  "0000110" when "1110", --E
					  "0001110" when "1111", --F
					  "0111111" when others;
	
end Behavioral;



----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 11/17/2023 05:08:45 PM
-- Design Name: 
-- Module Name: PasswordDetector - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity PasswordDetector is
    Port ( 
            clock : in  std_logic;                               -- Clock input
           keypad_input : in  std_logic_vector(3 downto 0);   -- Input from keypad for 4-digit code (Active Low)
           passcode_valid : out std_logic;                    -- Output indicating if the passcode is valid
           test : out std_logic_vector(2 downto 0)
    );
end PasswordDetector;

-- Architecture
architecture Behavioral of PasswordDetector is
    constant access_code : std_logic_vector(3 downto 0) := "1010";  -- Specific code to enter change mode
    signal correct_passcode : std_logic_vector(15 downto 0) := "0100001100100001"; -- Initial correct passcode
    signal entered_passcode : std_logic_vector(15 downto 0); -- Initialize entered passcode as active low
    signal passcode_match : std_logic := '1';                        -- Flag to indicate if passcode is entered
    signal change_in_progress : std_logic;                      -- Flag to indicate passcode change in progress
    signal digits_entered : integer range 0 to 4;
    signal last_input : std_logic_vector(3 downto 0);

begin
    process(clock)
    begin
    if rising_edge(clock) then
        if entered_passcode = correct_passcode then
            passcode_match <= '1';
            passcode_valid <= passcode_match;
        end if;
        if (not (keypad_input = last_input)) then
            last_input <= keypad_input;
            digits_entered <= digits_entered + 1;
            if (digits_entered = 5) and not (entered_passcode = correct_passcode) then
                entered_passcode <= "0000000000000000";
                digits_entered <= 1;
            else
                entered_passcode <= entered_passcode(11 downto 0) & keypad_input;
            end if;
            if entered_passcode = correct_passcode then
                passcode_match <= '1';
                passcode_valid <= passcode_match;
                --entered_passcode <= "0000000000000000";
            else
                passcode_match <= '0';
            end if;
        end if;
    end if;
    end process;
    
    passcode_valid <= passcode_match;
    
    with digits_entered select
        test <= "001" when 0,
                "010" when 1,
                "011" when 2,
                "100" when 3,
                "101" when others;
    
    
--    process
--    begin
--    passcode_match <= '1';
--    passcode_valid <= passcode_match;
--    end process;
    
--    process(clk, rst)
--    begin
--        if rst = '0' then
--            -- Reset state
--            entered_passcode <= "1111";
--            passcode_entered <= false;
--            passcode_valid <= '1';
--            change_mode <= '0';
--            change_in_progress <= false;

--        elsif rising_edge(clk) then
--            -- Check for keypad input when passcode is not fully entered
--            if not passcode_entered then
--                if keypad_input /= "1111" then
--                    entered_passcode <= not keypad_input; -- Invert active low input to active high
--                end if;

--                -- Check if 4-digit passcode is entered
--                if entered_passcode /= "1111" and entered_passcode /= "0000" then
--                    passcode_entered <= true;
--                end if;

--            -- Check for passcode validation
--            else
--                if entered_passcode = access_code then
--                    change_mode <= '1';  -- Enable change mode if the access code is entered
--                end if;

--                if change_mode = '0' then
--                    if entered_passcode = correct_passcode then
--                        passcode_valid <= '0';
--                    else
--                        passcode_valid <= '1';
--                    end if;
--                else
--                    change_in_progress <= true;
--                    correct_passcode <= not new_passcode; -- Invert active low input to active high
--                end if;
--            end if;
--        end if;
--    end process;
end Behavioral;



----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 11/17/2023 05:08:45 PM
-- Design Name: 
-- Module Name: PasswordDetector - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity PasswordDetector is
    Port ( 
            clock : in  std_logic;                               -- Clock input
           keypad_input : in  std_logic_vector(3 downto 0);   -- Input from keypad for 4-digit code (Active Low)
           passcode_valid : out std_logic;                    -- Output indicating if the passcode is valid
           test : out std_logic_vector(2 downto 0)
    );
end PasswordDetector;

-- Architecture
architecture Behavioral of PasswordDetector is
    constant access_code : std_logic_vector(3 downto 0) := "1010";  -- Specific code to enter change mode
    signal correct_passcode : std_logic_vector(15 downto 0) := "0100001100100001"; -- Initial correct passcode
    signal entered_passcode : std_logic_vector(15 downto 0); -- Initialize entered passcode as active low
    signal passcode_match : std_logic := '1';                        -- Flag to indicate if passcode is entered
    signal change_in_progress : std_logic;                      -- Flag to indicate passcode change in progress
    signal digits_entered : integer range 0 to 4;
    signal last_input : std_logic_vector(3 downto 0);

begin
    process(clock)
    begin
    if rising_edge(clock) then
        if entered_passcode = correct_passcode then
            passcode_match <= '1';
            passcode_valid <= passcode_match;
        else
                passcode_match <= '0';
        end if;
        if (not (keypad_input = last_input)) then
            last_input <= keypad_input;
            digits_entered <= digits_entered + 1;
            if (digits_entered = 5) and not (entered_passcode = correct_passcode) then
                entered_passcode <= "0000000000000000";
                digits_entered <= 1;
            else
                entered_passcode <= entered_passcode(11 downto 0) & keypad_input;
            end if;
        end if;
    end if;
    end process;
    
    --passcode_valid <= passcode_match;
    
    with digits_entered select
        test <= "001" when 0,
                "010" when 1,
                "011" when 2,
                "100" when 3,
                "101" when others;
    
    
--    process
--    begin
--    passcode_match <= '1';
--    passcode_valid <= passcode_match;
--    end process;
    
--    process(clk, rst)
--    begin
--        if rst = '0' then
--            -- Reset state
--            entered_passcode <= "1111";
--            passcode_entered <= false;
--            passcode_valid <= '1';
--            change_mode <= '0';
--            change_in_progress <= false;

--        elsif rising_edge(clk) then
--            -- Check for keypad input when passcode is not fully entered
--            if not passcode_entered then
--                if keypad_input /= "1111" then
--                    entered_passcode <= not keypad_input; -- Invert active low input to active high
--                end if;

--                -- Check if 4-digit passcode is entered
--                if entered_passcode /= "1111" and entered_passcode /= "0000" then
--                    passcode_entered <= true;
--                end if;

--            -- Check for passcode validation
--            else
--                if entered_passcode = access_code then
--                    change_mode <= '1';  -- Enable change mode if the access code is entered
--                end if;

--                if change_mode = '0' then
--                    if entered_passcode = correct_passcode then
--                        passcode_valid <= '0';
--                    else
--                        passcode_valid <= '1';
--                    end if;
--                else
--                    change_in_progress <= true;
--                    correct_passcode <= not new_passcode; -- Invert active low input to active high
--                end if;
--            end if;
--        end if;
--    end process;
end Behavioral;